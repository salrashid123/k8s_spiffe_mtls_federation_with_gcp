apiVersion: v1
kind: Namespace
metadata:
  name: sandbox-ns
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example-app-sa
  namespace: sandbox-ns
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: example-app-role
  namespace: sandbox-ns
rules:
- apiGroups: ["cert-manager.io"]
  resources: ["certificaterequests"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: example-app-rolebinding
  namespace: sandbox-ns
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: example-app-role
subjects:
- kind: ServiceAccount
  name: example-app-sa
  namespace: sandbox-ns
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-csi-app-deployment
  namespace: sandbox-ns
  labels:
    app: my-csi-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-csi-app
  template:
    metadata:
      labels:
        app: my-csi-app
    spec:
      serviceAccountName: example-app-sa
      containers:
        - name: my-frontend
          image: debian
          imagePullPolicy: IfNotPresent
          command: [ "sleep", "1000000" ]
          env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: "/adc/adcconfig/sts-creds.json"           
          volumeMounts:
          - mountPath: "/var/run/secrets/spiffe.io"
            name: spiffe
          - mountPath: /adc/adcconfig
            name: adc-config-vol
          - mountPath: /adc/certconfig
            name: cert-config-vol            
      volumes:
        - name: spiffe
          csi:
            driver: spiffe.csi.cert-manager.io
            readOnly: true
        - name: adc-config-vol
          configMap:
            name: adc-config
        - name: cert-config-vol
          configMap:
            name: cert-config                              
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adc-config
  namespace: sandbox-ns  
data:
  sts-creds.json: |
    {
      "universe_domain": "googleapis.com",
      "type": "external_account",
      "audience": "//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/global/workloadIdentityPools/$POOL_ID/providers/$PROVIDER_ID",
      "subject_token_type": "urn:ietf:params:oauth:token-type:mtls",
      "token_url": "https://sts.mtls.googleapis.com/v1/token",
      "credential_source": {
        "certificate": {
          "certificate_config_location": "/adc/certconfig/cert-config.json"
        }
      },
      "token_info_url": "https://sts.mtls.googleapis.com/v1/introspect"
    }

---             
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-config
  namespace: sandbox-ns  
data:
  cert-config.json: |
    {
      "cert_configs": {
        "workload": {
          "cert_path": "/var/run/secrets/spiffe.io/tls.crt",
          "key_path": "/var/run/secrets/spiffe.io/tls.key"
        }
      }
    }